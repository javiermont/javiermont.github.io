{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This document details step by step the process of changing the database from latin1 to utf-8 encoding and table engine MyIsam to InnoDb in Mysql. ISO-8851-1 to UTF-8 in MySql 1.- Make sure mysql-client is installed. If not, then : sudo apt install mysql-client or sudo apt-get install mysql-client 2.- Open php.ini: /etc/php/7.0/cli/php.ini or /etc/php/7.0/apache2/php.ini ; PHP's default character set is set to UTF-8. ; http://php.net/default-charset default_charset = \"UTF-8\" 3.- Disconnect all active applications connected to mysql and take a backup of the database. 4.- Speak UTF-8 everywhere. Update mysqld, mysql and client settings as follows(/etc/mysql/*.cnf) 4.1.- /etc/mysql/mariadb.conf.d/50-server.cnf [mysqld] character_set_server=utf8mb4 collation_server=utf8mb4_unicode_ci #The following should be set if you are using mysql version 5.6 or lower innodb_file_format=barracuda innodb_file_per_table=1 innodb_large_prefix=1 innodb_data_file_path = ibdata1:50M:autoextend:max:2G innodb_buffer_pool_size = 1536M innodb_log_file_size = 128M innodb_log_buffer_size = 8M innodb_flush_log_at_trx_commit = 0 innodb_flush_method = O_DIRECT innodb_doublewrite = 0 4.2. /etc/mysql/mariadb.conf.d/50-client.cnf [client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character_set_server=utf8mb4 collation_server=utf8mb4_unicode_ci #The following should be set if you are using mysql version 5.6 or lower innodb_file_format=barracuda innodb_file_per_table=1 innodb_large_prefix=1 innodb_data_file_path = ibdata1:50M:autoextend:max:2G innodb_buffer_pool_size = 1536M innodb_log_file_size = 128M innodb_log_buffer_size = 8M innodb_flush_log_at_trx_commit = 0 innodb_flush_method = O_DIRECT innodb_doublewrite = 0 5.- Restart mysql service /etc/init.d/mysql restart 6.- Connect to mysql using command line: mysql -u databasename 7- Run the following query: SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%'; Output: +--------------------------+--------------------+ | Variable_name | Value | +--------------------------+--------------------+ | character_set_client | utf8mb4 | | character_set_connection | utf8mb4 | | character_set_database | utf8mb4 | | character_set_filesystem | binary | | character_set_results | utf8mb4 | | character_set_server | utf8mb4 | | character_set_system | utf8 | | collation_connection | utf8mb4_general_ci | | collation_database | utf8mb4_unicode_ci | | collation_server | utf8mb4_unicode_ci | +--------------------------+--------------------+ 8.- Convert your Latin-1 collated tables to UTF-8 8.1.- To optimize this process, the non-primary indices of each table have been eliminated. After the process they will be re-established. For this purpose: - Save index no primaries: mysql -uroot -e\"SELECT CONCAT('ALTER TABLE ',TABLE_NAME,' ADD ',IF(NON_UNIQUE=1,'','UNIQUE'),' INDEX ',INDEX_NAME,' (',group_concat(COLUMN_NAME),');') FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = 'databasename' AND INDEX_NAME!='PRIMARY' GROUP BY TABLE_NAME,INDEX_NAME;\" creacion_indices.sql cat creacion_indices.sql | sed 1d creacion_indices_new.sql - Drop index no primaries: mysql -uroot -e\"SELECT CONCAT('DROP INDEX ',INDEX_NAME,' ON ',TABLE_NAME,';') FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = 'databasename' AND INDEX_NAME!='PRIMARY' GROUP BY TABLE_NAME,INDEX_NAME;\" eliminar_indices.sql cat eliminar_indices.sql | sed 1d eliminar_indices_new.sql mysql -v -u \"$MYSQL_USER\" -p\"$MYSQL_PASS\" \"$MYSQL_DB\" eliminar_indices_new.sql Individual queries on each table : 8.2.- Changing the default charset of the database: ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 8.3.- Changing the default charset of individual tables: ALTER TABLE tablename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC; 8.4.- Changing the default charset of individual column of tables: ALTER TABLE tablename CHANGE columname columname VARCHAR(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''; 8.5.- Restore non-primary indexes removed: Create index no primaries: mysql -v -u \"$MYSQL_USER\" -p\"$MYSQL_PASS\" \"$MYSQL_DB\" creacion_indices_new.sql 9.- Repair the tables for any problems in-case mysqlcheck -v -u root -p --auto-repair --optimize --databases databasename 10.- Stored Procedures: mysqldump -u root -p -dtR databasename store_procedures.sql perl -i -pe 's/ALTER DATABASE `trabajos2007` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;//' store_procedures.sql perl -i -pe 's/ALTER DATABASE `trabajos2007` CHARACTER SET latin1 COLLATE latin1_spanish_ci ;//' store_procedures.sql perl -i -pe 's/ALTER DATABASE `trabajos2007` CHARACTER SET latin1 COLLATE latin1_swedish_ci ;//' store_procedures.sql perl -i -pe 's/CHARACTER SET latin1 COLLATE latin1_spanish_ci/CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci/' store_procedures.sql perl -i -pe 's/CHARACTER SET latin1 COLLATE latin1_swedish_ci/CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci/' store_procedures.sql perl -i -pe 's/SET character_set_client = latin1/SET character_set_client = utf8/' store_procedures.sql perl -i -pe 's/SET character_set_results = latin1/SET character_set_results = utf8/' store_procedures.sql perl -i -pe 's/SET collation_connection = latin1_spanish_ci/SET collation_connection = utf8mb4_general_ci/' store_procedures.sql perl -i -pe 's/SET collation_connection = latin1_swedish_ci/SET collation_connection = utf8mb4_general_ci/' store_procedures.sql perl -i -pe 's/CHARSET latin1/CHARSET utf8mb4/' store_procedures.sql mysql -u root -p databasename store_procedures.sql MyISAM to InnoDB In MySql 1.- Speed things up before changing MyISAM to InnoDB. Before you convert the table engine, you can adjust the order so that the primary key column is in order: ALTER TABLE tablename ORDER BY 'primary_key_column'; 2.- List a complete ALTER TABLE statement for MyISAM tables. First of all: the following query will list an ALTER TABLE statement for all tables in your database: ALTER TABLE tablename ENGINE=InnoDB; 3.- Optimize all InnoDB tables with one prepared statement: Use the following statement to optimize all MySQL tables in your database: OPTIMIZE TABLE tablename; How to know length of index InnoDb in uft-8 (max 191 characters) Example: first execute this sentence select ROUND(SUM(LENGTH(columname) 10)*100/COUNT(columname),2) AS pct_length_10,ROUND(SUM(LENGTH(columname) 20)*100/COUNT(columname),2) AS pct_length_20, ROUND(SUM(LENGTH(columname) 50)*100/COUNT(columname),2) AS pct_length_50, ROUND(SUM(LENGTH(columname) 100)*100/COUNT(columname),2) AS pct_length_100 FROM tablename; Result: pct_length_10, pct_length_20, pct_length_50, pct_length_100 '0.00', '100.00', '100.00', '100.00' Choice the number of characters you get in the first 100%, remember max 191 characters. In this example, the lenght of the index will be 20: ALTER TABLE tablename CHANGE COLUMN columname columname VARCHAR(191) NOT NULL ,CHANGE COLUMN devicename devicename VARCHAR(20) NOT NULL; Service The firts thing to do is change charset to utf-8 of the files of service. 1) Convert phtml,php,inc,plib,html,thtml files extension (don\u2019t conver images, document, certificates, etc) a utf-8. Each folder that you can modify has to perform this process. The next example is made for \u201cprogramas\u201d folder: cd /home/service/foulder/ find . -type d dirs.txt cd .. mkdir foulder_utf8 cd foulder_utf8 xargs mkdir -p ../foulder/dirs.txt cd ../foulder/ rm dirs.txt find . -type f -exec iconv -f iso-8859-1 -t utf-8 \"{}\" -o /home/service/foulder_utf8/\"{}\" \\; cd .. mv foulder foulder_iso mv foulder_utf8 foulder rm foulder_iso 2) Changing iso-8859-1 to utf-8: a) Headers: header(\u2018Content-Type: text/html; charset=utf-8\u2019); b) Xml: ?xml version=\"1.0\" encoding=\"UTF-8\"? c) HTML content: meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" form accept-charset=\"utf-8\" d) Functions: htmlspecialchars, htmlentities htmlspecialchars($str, ENT_NOQUOTES, \"UTF-8\") 3) PHP code: a) MyIsam to InnoDb Change ENGINE=MYISAM DEFAULT CHARSET=latin1 for ENGINE=InnoDb CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci Change CHARSET latin1 for CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC; b) DB connection: // CODIFICACION UTF-8 mysqli_options($conn, MYSQLI_SET_CHARSET_NAME, \"utf8mb4\"); c) Mailer charset: // CHARSET utf-8 $Mailer- CharSet = 'UTF-8'; d) In \u201cjson_encode\u201d function: Do not code texts: \u201cencodeURI(escape(\u201c, \u201cencodeURI(\u201c, \u201cescape(\u201c e) In ajax calls ,do not code texts: \u201cdecodeURI(unescape(\u201c Apply contentType: application/x-www-form-urlencoded; charset=UTF-8 f) In javascript, do not code texts: \u201cencodeURIComponent(escape(\u201c \u201cencodeURIComponent(\u201c \u201cescape(\u201c \u201cencodeURI(escape(\u201c \u201cencodeURI(\u201c \u201cunescape(decodeURI(\u201c \u201cunescape(\u201c \u201cdecodeURI(\u201c g) In \u201cjson_encode\u201d functions, in $_GET, $_POST and API calls, remove code texts, do not apply \u201cuft8_decode\u201d and \u201cutf8_encode\u201d functions. Resources https://gist.github.com/mdemblani/34d30015f24e1927736f189b88be143a https://www.toptal.com/php/codificacion-de-datos-una-guia-utf-8-para-php-y-mysql/es https://codex.wordpress.org/Converting_Database_Character_Sets http://rocketmodule.com/blog/convert-your-mysql-database-myisam-innodb-and-get-ready-drupal-7-same-time/index.html https://blog.ghost3k.net/articles/mysql/30/mysql-converting-large-tables-to-innodb-faster https://diego.com.es/codificacion-de-strings-en-php https://medium.com/@jesseproudman/getting-out-of-mysql-character-set-hell-8431e75383db","title":"Home"},{"location":"#introduction","text":"This document details step by step the process of changing the database from latin1 to utf-8 encoding and table engine MyIsam to InnoDb in Mysql.","title":"Introduction"},{"location":"#iso-8851-1-to-utf-8-in-mysql","text":"1.- Make sure mysql-client is installed. If not, then : sudo apt install mysql-client or sudo apt-get install mysql-client 2.- Open php.ini: /etc/php/7.0/cli/php.ini or /etc/php/7.0/apache2/php.ini ; PHP's default character set is set to UTF-8. ; http://php.net/default-charset default_charset = \"UTF-8\" 3.- Disconnect all active applications connected to mysql and take a backup of the database. 4.- Speak UTF-8 everywhere. Update mysqld, mysql and client settings as follows(/etc/mysql/*.cnf) 4.1.- /etc/mysql/mariadb.conf.d/50-server.cnf [mysqld] character_set_server=utf8mb4 collation_server=utf8mb4_unicode_ci #The following should be set if you are using mysql version 5.6 or lower innodb_file_format=barracuda innodb_file_per_table=1 innodb_large_prefix=1 innodb_data_file_path = ibdata1:50M:autoextend:max:2G innodb_buffer_pool_size = 1536M innodb_log_file_size = 128M innodb_log_buffer_size = 8M innodb_flush_log_at_trx_commit = 0 innodb_flush_method = O_DIRECT innodb_doublewrite = 0 4.2. /etc/mysql/mariadb.conf.d/50-client.cnf [client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character_set_server=utf8mb4 collation_server=utf8mb4_unicode_ci #The following should be set if you are using mysql version 5.6 or lower innodb_file_format=barracuda innodb_file_per_table=1 innodb_large_prefix=1 innodb_data_file_path = ibdata1:50M:autoextend:max:2G innodb_buffer_pool_size = 1536M innodb_log_file_size = 128M innodb_log_buffer_size = 8M innodb_flush_log_at_trx_commit = 0 innodb_flush_method = O_DIRECT innodb_doublewrite = 0 5.- Restart mysql service /etc/init.d/mysql restart 6.- Connect to mysql using command line: mysql -u databasename 7- Run the following query: SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%'; Output: +--------------------------+--------------------+ | Variable_name | Value | +--------------------------+--------------------+ | character_set_client | utf8mb4 | | character_set_connection | utf8mb4 | | character_set_database | utf8mb4 | | character_set_filesystem | binary | | character_set_results | utf8mb4 | | character_set_server | utf8mb4 | | character_set_system | utf8 | | collation_connection | utf8mb4_general_ci | | collation_database | utf8mb4_unicode_ci | | collation_server | utf8mb4_unicode_ci | +--------------------------+--------------------+ 8.- Convert your Latin-1 collated tables to UTF-8 8.1.- To optimize this process, the non-primary indices of each table have been eliminated. After the process they will be re-established. For this purpose: - Save index no primaries: mysql -uroot -e\"SELECT CONCAT('ALTER TABLE ',TABLE_NAME,' ADD ',IF(NON_UNIQUE=1,'','UNIQUE'),' INDEX ',INDEX_NAME,' (',group_concat(COLUMN_NAME),');') FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = 'databasename' AND INDEX_NAME!='PRIMARY' GROUP BY TABLE_NAME,INDEX_NAME;\" creacion_indices.sql cat creacion_indices.sql | sed 1d creacion_indices_new.sql - Drop index no primaries: mysql -uroot -e\"SELECT CONCAT('DROP INDEX ',INDEX_NAME,' ON ',TABLE_NAME,';') FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = 'databasename' AND INDEX_NAME!='PRIMARY' GROUP BY TABLE_NAME,INDEX_NAME;\" eliminar_indices.sql cat eliminar_indices.sql | sed 1d eliminar_indices_new.sql mysql -v -u \"$MYSQL_USER\" -p\"$MYSQL_PASS\" \"$MYSQL_DB\" eliminar_indices_new.sql Individual queries on each table : 8.2.- Changing the default charset of the database: ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 8.3.- Changing the default charset of individual tables: ALTER TABLE tablename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC; 8.4.- Changing the default charset of individual column of tables: ALTER TABLE tablename CHANGE columname columname VARCHAR(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''; 8.5.- Restore non-primary indexes removed: Create index no primaries: mysql -v -u \"$MYSQL_USER\" -p\"$MYSQL_PASS\" \"$MYSQL_DB\" creacion_indices_new.sql 9.- Repair the tables for any problems in-case mysqlcheck -v -u root -p --auto-repair --optimize --databases databasename 10.- Stored Procedures: mysqldump -u root -p -dtR databasename store_procedures.sql perl -i -pe 's/ALTER DATABASE `trabajos2007` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;//' store_procedures.sql perl -i -pe 's/ALTER DATABASE `trabajos2007` CHARACTER SET latin1 COLLATE latin1_spanish_ci ;//' store_procedures.sql perl -i -pe 's/ALTER DATABASE `trabajos2007` CHARACTER SET latin1 COLLATE latin1_swedish_ci ;//' store_procedures.sql perl -i -pe 's/CHARACTER SET latin1 COLLATE latin1_spanish_ci/CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci/' store_procedures.sql perl -i -pe 's/CHARACTER SET latin1 COLLATE latin1_swedish_ci/CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci/' store_procedures.sql perl -i -pe 's/SET character_set_client = latin1/SET character_set_client = utf8/' store_procedures.sql perl -i -pe 's/SET character_set_results = latin1/SET character_set_results = utf8/' store_procedures.sql perl -i -pe 's/SET collation_connection = latin1_spanish_ci/SET collation_connection = utf8mb4_general_ci/' store_procedures.sql perl -i -pe 's/SET collation_connection = latin1_swedish_ci/SET collation_connection = utf8mb4_general_ci/' store_procedures.sql perl -i -pe 's/CHARSET latin1/CHARSET utf8mb4/' store_procedures.sql mysql -u root -p databasename store_procedures.sql","title":"ISO-8851-1 to UTF-8 in MySql"},{"location":"#myisam-to-innodb-in-mysql","text":"1.- Speed things up before changing MyISAM to InnoDB. Before you convert the table engine, you can adjust the order so that the primary key column is in order: ALTER TABLE tablename ORDER BY 'primary_key_column'; 2.- List a complete ALTER TABLE statement for MyISAM tables. First of all: the following query will list an ALTER TABLE statement for all tables in your database: ALTER TABLE tablename ENGINE=InnoDB; 3.- Optimize all InnoDB tables with one prepared statement: Use the following statement to optimize all MySQL tables in your database: OPTIMIZE TABLE tablename;","title":"MyISAM to InnoDB In MySql"},{"location":"#how-to-know-length-of-index-innodb-in-uft-8-max-191-characters","text":"Example: first execute this sentence select ROUND(SUM(LENGTH(columname) 10)*100/COUNT(columname),2) AS pct_length_10,ROUND(SUM(LENGTH(columname) 20)*100/COUNT(columname),2) AS pct_length_20, ROUND(SUM(LENGTH(columname) 50)*100/COUNT(columname),2) AS pct_length_50, ROUND(SUM(LENGTH(columname) 100)*100/COUNT(columname),2) AS pct_length_100 FROM tablename; Result: pct_length_10, pct_length_20, pct_length_50, pct_length_100 '0.00', '100.00', '100.00', '100.00' Choice the number of characters you get in the first 100%, remember max 191 characters. In this example, the lenght of the index will be 20: ALTER TABLE tablename CHANGE COLUMN columname columname VARCHAR(191) NOT NULL ,CHANGE COLUMN devicename devicename VARCHAR(20) NOT NULL;","title":"How to know length of index InnoDb in uft-8 (max 191 characters)"},{"location":"#service","text":"The firts thing to do is change charset to utf-8 of the files of service. 1) Convert phtml,php,inc,plib,html,thtml files extension (don\u2019t conver images, document, certificates, etc) a utf-8. Each folder that you can modify has to perform this process. The next example is made for \u201cprogramas\u201d folder: cd /home/service/foulder/ find . -type d dirs.txt cd .. mkdir foulder_utf8 cd foulder_utf8 xargs mkdir -p ../foulder/dirs.txt cd ../foulder/ rm dirs.txt find . -type f -exec iconv -f iso-8859-1 -t utf-8 \"{}\" -o /home/service/foulder_utf8/\"{}\" \\; cd .. mv foulder foulder_iso mv foulder_utf8 foulder rm foulder_iso 2) Changing iso-8859-1 to utf-8: a) Headers: header(\u2018Content-Type: text/html; charset=utf-8\u2019); b) Xml: ?xml version=\"1.0\" encoding=\"UTF-8\"? c) HTML content: meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" form accept-charset=\"utf-8\" d) Functions: htmlspecialchars, htmlentities htmlspecialchars($str, ENT_NOQUOTES, \"UTF-8\") 3) PHP code: a) MyIsam to InnoDb Change ENGINE=MYISAM DEFAULT CHARSET=latin1 for ENGINE=InnoDb CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci Change CHARSET latin1 for CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC; b) DB connection: // CODIFICACION UTF-8 mysqli_options($conn, MYSQLI_SET_CHARSET_NAME, \"utf8mb4\"); c) Mailer charset: // CHARSET utf-8 $Mailer- CharSet = 'UTF-8'; d) In \u201cjson_encode\u201d function: Do not code texts: \u201cencodeURI(escape(\u201c, \u201cencodeURI(\u201c, \u201cescape(\u201c e) In ajax calls ,do not code texts: \u201cdecodeURI(unescape(\u201c Apply contentType: application/x-www-form-urlencoded; charset=UTF-8 f) In javascript, do not code texts: \u201cencodeURIComponent(escape(\u201c \u201cencodeURIComponent(\u201c \u201cescape(\u201c \u201cencodeURI(escape(\u201c \u201cencodeURI(\u201c \u201cunescape(decodeURI(\u201c \u201cunescape(\u201c \u201cdecodeURI(\u201c g) In \u201cjson_encode\u201d functions, in $_GET, $_POST and API calls, remove code texts, do not apply \u201cuft8_decode\u201d and \u201cutf8_encode\u201d functions.","title":"Service"},{"location":"#resources","text":"https://gist.github.com/mdemblani/34d30015f24e1927736f189b88be143a https://www.toptal.com/php/codificacion-de-datos-una-guia-utf-8-para-php-y-mysql/es https://codex.wordpress.org/Converting_Database_Character_Sets http://rocketmodule.com/blog/convert-your-mysql-database-myisam-innodb-and-get-ready-drupal-7-same-time/index.html https://blog.ghost3k.net/articles/mysql/30/mysql-converting-large-tables-to-innodb-faster https://diego.com.es/codificacion-de-strings-en-php https://medium.com/@jesseproudman/getting-out-of-mysql-character-set-hell-8431e75383db","title":"Resources"}]}